This repo, terraform-buckets-eks-auto-mode, is a self-contained IaC example that shows how to go from zero to a fully functional AWS environment—complete with S3 storage, networking, a private EKS cluster in “Auto Mode,” and a sample app deployment. Here’s what it does:

Dual S3 Bucket Provisioning

Native buckets: Uses a random_id + for_each pattern to spin up N buckets with AES-256 encryption, versioning, and a strict public-access block.

Module bucket: Demonstrates the same compliance requirements using the popular terraform-aws-modules/s3-bucket module for comparison.

Custom VPC Networking

Builds a VPC with DNS support, two public subnets (with an Internet Gateway) and two private subnets (with a NAT Gateway).

Configures route tables and associations so public subnets route to the IGW and private subnets route through the NAT.

EKS Cluster in Auto Mode

Deploys a fully private control plane (public_access = false, private_access = true).

Creates an on-demand node group (Auto Mode) across the private subnets with configurable min/max/desired capacity.

Bootstraps the aws-auth ConfigMap for IAM-based Kubernetes auth.

Kubernetes Sample App

At the repo root there’s a k8s.yaml manifest that:

Creates a Namespace for isolation.

Deploys 5 replicas of the app-chat container with CPU requests.

Exposes them via a ClusterIP Service on port 80.

Defines an IngressClass for the AWS Load Balancer Controller and an Ingress resource annotated to provision an internet-facing ALB routing / to your service.

Workflow

Terraform: terraform init && terraform plan/apply in the root wires up S3 modules → VPC → EKS.

Kubernetes: kubectl apply -f k8s.yaml deploys and exposes the game.

Test: kubectl describe ingress to get the ALB DNS, then curl it to confirm you see the app UI.

This end-to-end project demonstrates enterprise-grade best practices for secure S3, resilient networking, private-only Kubernetes, and an ALB-backed service—all defined declaratively in Terraform and Kubernetes YAML.